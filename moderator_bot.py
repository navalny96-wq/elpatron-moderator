# -*- coding: utf-8 -*-
import os
import re
import threading
import logging
from collections import defaultdict

from flask import Flask
from telegram.ext import Updater, MessageHandler, Filters
from telegram import ChatPermissions

# ------------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è -------------------------

# –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º–æ –∑ env
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN or not BOT_TOKEN.strip():
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

# –î–æ–∑–≤–æ–ª–µ–Ω—ñ —á–∞—Ç–∏ (—è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî –ø—Ä–∞—Ü—é—î–º–æ –≤—Å—é–¥–∏)
# –ø—Ä–∏–∫–ª–∞–¥ –∑–º—ñ–Ω–Ω–æ—ó –Ω–∞ Render: ALLOWED_CHAT_IDS=-1002101234567,-1002227654321
_raw = (os.getenv("ALLOWED_CHAT_IDS") or "").replace(" ", "")
ALLOWED_CHAT_IDS = {int(x) for x in _raw.split(",") if x} if _raw else set()

# –°–ø–∏—Å–æ–∫ –ª–∞–π–∫–∏/–æ–±—Ä–∞–∑–∏ + —Ç–µ–º–∏, —è–∫—ñ —á–∏—Å—Ç–∏–º–æ
BAD_WORDS = [
    "—Ö—É–π","–ø–∏–∑–¥–∞","—î–±–∞—Ç—å","—î–±—É—á","–Ω–∞—Ö—É–π","–≥–∞–Ω–¥–æ–Ω","–∑–∞–ª—É–ø–∞","–±–ª—è–¥—å","—Å—É–∫–∞","—à–∞–ª–∞–≤–∞","—á–º–æ","–º—Ä–∞–∑—å","–≥–Ω–∏–¥–∞",
    "fuck","shit","bitch","asshole","faggot","dick","pussy","nigger","retard",
    "—Ö–µ—Ä","–¥–∞—É–Ω","—É–±–ª—é–¥–æ–∫","–ø–µ–¥–∏–∫","–ø–µ—Ç—É—Ö","–¥–æ–ª–±–æ–µ–±","–º—É–¥–∞–∫","–≥–∞–Ω–¥–∂–∞","–º–∞—Ä—ñ—Ö—É–∞–Ω–∞","—Ç—Ä–∞–≤–∫–∞"
]
BANNED_TOPICS = [
    "–≤—ñ–π–Ω–∞","–≤—ñ–π—Å—å–∫–æ","–ø–æ–ª—ñ—Ç–∏–∫–∞","–ø—É—Ç—ñ–Ω","–∑–µ–ª–µ–Ω—Å—å–∫–∏–π",
    "–±–æ–º–±–∞","–º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è","–≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è","—Ä–∞—à–∫–∞","–∫–∞—Ü–∞–ø–∏","–∞–≥—Ä–µ—Å—ñ—è",
    "–Ω–∞—Ü–∏—Å—Ç","—Ä–∞—Å–∏–∑–º","—Ç–µ—Ä–æ—Ä–∏–∑–º","—Å–º–µ—Ä—Ç—å","–≤–±–∏–≤—Å—Ç–≤–æ","—Å—Ç—Ä—ñ–ª—è–Ω–∏–Ω–∞"
]

# –ü–æ–≤–Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–∞ –ø–æ—Å–∏–ª–∞–Ω—å (–≤–∫–ª—é—á–Ω–æ –∑ t.me, bit.ly, –¥–æ–º–µ–Ω–∏ —Ç–æ—â–æ)
URL_PATTERN = re.compile(r"(https?://|www\.|[a-zA-Z0-9-]+\.(com|net|ua|org|ru|by|kz|pl|info|biz|io|gg|me|ly|t\.me))")

# –°–∫—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–æ –±–∞–Ω–∞
MAX_WARNINGS = 2

# –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ—Ä—É—à–µ–Ω—å –ø–æ –∑–≤‚Äô—è–∑—Ü—ñ (chat_id, user_id)
violations = defaultdict(int)

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("moderator")

# ------------------------- –õ–æ–≥—ñ–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó -------------------------

def is_admin(bot, chat_id: int, user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä/–≤–ª–∞—Å–Ω–∏–∫ (–±–æ—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤)."""
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ("administrator", "creator")
    except Exception as e:
        log.warning(f"get_chat_member error: {e}")
        return False

def moderate(update, context):
    if not update.message or not update.message.from_user:
        return
    if not update.message.text:
        return

    chat_id = update.message.chat_id
    user = update.message.from_user
    user_id = user.id
    text = update.message.text.lower()

    # –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ ‚Äî –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –≤ –Ω–∏—Ö
    if ALLOWED_CHAT_IDS and chat_id not in ALLOWED_CHAT_IDS:
        return

    has_violation = False
    if any(w in text for w in BAD_WORDS) or any(t in text for t in BANNED_TOPICS):
        has_violation = True
    if URL_PATTERN.search(text):
        has_violation = True

    if not has_violation:
        return

    # –ü—Ä–∞–≥–Ω–µ–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ä—É—à–µ–Ω–Ω—è
    try:
        context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    except Exception as e:
        log.warning(f"delete_message error: {e}")

    key = (chat_id, user_id)
    violations[key] += 1
    count = violations[key]

    # –Ø–∫—â–æ –ø–æ—Ä—É—à–Ω–∏–∫ ‚Äî –∞–¥–º—ñ–Ω, –Ω–µ –±–∞–Ω–∏–º–æ, –ª–∏—à–µ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
    if is_admin(context.bot, chat_id, user_id):
        try:
            context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è –ü–æ—Ä—É—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.full_name}. –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤–∞ –±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤."
            )
        except Exception as e:
            log.warning(f"send_message (admin notice) error: {e}")
        return

    # –ë–∞–Ω –ø—ñ—Å–ª—è MAX_WARNINGS
    if count >= MAX_WARNINGS:
        try:
            context.bot.kick_chat_member(chat_id=chat_id, user_id=user_id)
            context.bot.send_message(
                chat_id=chat_id,
                text=f"‚õî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª."
            )
        except Exception as e:
            log.warning(f"kick_chat_member error: {e}")
    else:
        try:
            context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è {user.full_name}: –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª ({count}/{MAX_WARNINGS})"
            )
        except Exception as e:
            log.warning(f"send_message (warn) error: {e}")

# ------------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ + Healthcheck -------------------------

def run_bot():
    updater = Updater(BOT_TOKEN, use_context=True)

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –º–æ–∂–ª–∏–≤–∏–π webhook —ñ —Å—Ç–∞—Ä—ñ –∞–ø–¥–µ–π—Ç–∏ (–≤–∞–∂–ª–∏–≤–æ –ø—Ä–∏ –º—ñ–≥—Ä–∞—Ü—ñ—è—Ö/–∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∞—Ö)
    try:
        updater.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning(f"delete_webhook error: {e}")

    dp = updater.dispatcher
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, moderate))

    log.info("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (polling)‚Ä¶")
    updater.start_polling(clean=True)
    updater.idle()

# –ù–µ–≤–µ–ª–∏—á–∫–∏–π Flask-—Å–µ—Ä–≤–µ—Ä, —â–æ–± Render –±–∞—á–∏–≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –ø–æ—Ä—Ç
app = Flask(__name__)

@app.get("/")
def ok():
    return "OK", 200

if __name__ == "__main__":
    # –°—Ç–∞—Ä—Ç—É—î–º–æ –±–æ—Ç–∞ —É —Ñ–æ–Ω—ñ
    t = threading.Thread(target=run_bot, daemon=True)
    t.start()

    # –°–ª—É—Ö–∞—î–º–æ –ø–æ—Ä—Ç, —è–∫–∏–π Render –ø–µ—Ä–µ–¥–∞—î —É –∑–º—ñ–Ω–Ω—ñ–π PORT
    port = int(os.getenv("PORT", "10000"))
    log.info(f"üåê Health server on port {port}")
    app.run(host="0.0.0.0", port=port)
