# -*- coding: utf-8 -*-
import os
import re
import logging
from collections import defaultdict
from flask import Flask, request, jsonify

from telegram import Bot, Update
from telegram.ext import Dispatcher, MessageHandler, Filters
from telegram.error import TelegramError

# ========= –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =========
BOT_TOKEN = os.getenv("BOT_TOKEN") or "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù_–¢–£–¢"
if BOT_TOKEN == "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù_–¢–£–¢":
    raise RuntimeError("–ó–∞–¥–∞–π BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# URL —Å–µ—Ä–≤—ñ—Å—É (Render –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î RENDER_EXTERNAL_URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
APP_URL = os.getenv("APP_URL") or os.getenv("RENDER_EXTERNAL_URL")
if not APP_URL:
    raise RuntimeError("–ù–µ–º–∞ APP_URL/RENDER_EXTERNAL_URL. –î–æ–¥–∞–π APP_URL –≤ Environment –Ω–∞ Render.")

BAD_WORDS = [
    "—Ö—É–π","–ø–∏–∑–¥–∞","—î–±–∞—Ç—å","—î–±—É—á","–Ω–∞—Ö—É–π","–≥–∞–Ω–¥–æ–Ω","–∑–∞–ª—É–ø–∞","–±–ª—è–¥—å","—Å—É–∫–∞","—à–∞–ª–∞–≤–∞","—á–º–æ","–º—Ä–∞–∑—å","–≥–Ω–∏–¥–∞",
    "fuck","shit","bitch","asshole","dick","pussy"
]
BANNED_TOPICS = [
    "–ø–æ–ª—ñ—Ç–∏–∫–∞","–ø—É—Ç—ñ–Ω","–∑–µ–ª–µ–Ω—Å—å–∫–∏–π","–≤—ñ–π–Ω–∞","–º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è","—Ç–µ—Ä–æ—Ä–∏–∑–º","–Ω–∞—Å–∏–ª—å—Å—Ç–≤–æ"
]
URL_PATTERN = re.compile(r"(https?://|www\.)", re.IGNORECASE)
MAX_WARNINGS = 2

warnings = defaultdict(int)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("modbot")

# ========= Telegram –æ–± º—î–∫—Ç–∏ =========
bot = Bot(BOT_TOKEN)
dispatcher = Dispatcher(bot=bot, update_queue=None, workers=4, use_context=True)

# ========= –ª–æ–≥—ñ–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó =========
def handle_violation(update, context, reason):
    u = update.message.from_user
    uid = u.id
    chat_id = update.message.chat_id

    warnings[uid] += 1

    # –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        update.message.delete()
    except TelegramError as e:
        log.warning(f"delete error: {e}")

    if warnings[uid] < MAX_WARNINGS:
        try:
            update.message.reply_text(f"‚ö† –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è! ({reason}). –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É ‚Äî –±–∞–Ω.")
        except TelegramError as e:
            log.warning(f"warn reply error: {e}")
    else:
        try:
            context.bot.kick_chat_member(chat_id, uid)
            update.message.reply_text(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ ({reason}).")
        except TelegramError as e:
            log.warning(f"ban error: {e}")

def check_message(update, context):
    if not update.message or not update.message.text:
        return
    text = update.message.text.lower()

    if any(w in text for w in BAD_WORDS):
        handle_violation(update, context, "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–µ–∫—Å–∏–∫–∞"); return
    if any(t in text for t in BANNED_TOPICS):
        handle_violation(update, context, "–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ —Ç–µ–º–∞"); return
    if URL_PATTERN.search(text):
        handle_violation(update, context, "–ø–æ—Å–∏–ª–∞–Ω–Ω—è"); return

dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, check_message))

# ========= Flask / Webhook =========
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

@app.post(f"/{BOT_TOKEN}")
def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, bot)
        dispatcher.process_update(update)
    except Exception as e:
        log.exception(f"update handling error: {e}")
        return jsonify({"ok": False}), 500
    return jsonify({"ok": True})

def set_webhook():
    # –ü–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ—é ‚Äî —á–∏—Å—Ç–∏–º–æ –ø—ñ–¥–≤—ñ—à–µ–Ω—ñ –∞–ø–¥–µ–π—Ç–∏
    try:
        bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning(f"delete_webhook warn: {e}")

    url = f"{APP_URL.rstrip('/')}/{BOT_TOKEN}"
    ok = bot.set_webhook(url=url, drop_pending_updates=True, max_connections=40)
    if ok:
        log.info(f"‚úÖ Webhook set: {url}")
    else:
        raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook")

if __name__ == "__main__":
    set_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info(f"üåê Flask listening on {port}")
    app.run(host="0.0.0.0", port=port)
