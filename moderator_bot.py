# -*- coding: utf-8 -*-
import os
import re
import threading
import logging
from collections import defaultdict

from flask import Flask
from telegram.ext import Updater, MessageHandler, Filters
from telegram import ChatPermissions

# ------------------------- –ö–æ–Ω—Ñ—ñ–≥ -------------------------

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN or not BOT_TOKEN.strip():
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

BAD_WORDS = [
    "—Ö—É–π","–ø–∏–∑–¥–∞","—î–±–∞—Ç—å","—î–±—É—á","–Ω–∞—Ö—É–π","–≥–∞–Ω–¥–æ–Ω","–∑–∞–ª—É–ø–∞","–±–ª—è–¥—å","—Å—É–∫–∞","—à–∞–ª–∞–≤–∞","—á–º–æ","–º—Ä–∞–∑—å","–≥–Ω–∏–¥–∞",
    "fuck","shit","bitch","asshole","faggot","dick","pussy","nigger","retard",
    "—Ö–µ—Ä","–¥–∞—É–Ω","—É–±–ª—é–¥–æ–∫","–ø–µ–¥–∏–∫","–ø–µ—Ç—É—Ö","–¥–æ–ª–±–æ–µ–±","–º—É–¥–∞–∫","–≥–∞–Ω–¥–∂–∞","–º–∞—Ä—ñ—Ö—É–∞–Ω–∞","—Ç—Ä–∞–≤–∫–∞"
]
BANNED_TOPICS = [
    "–≤—ñ–π–Ω–∞","–≤—ñ–π—Å—å–∫–æ","–ø–æ–ª—ñ—Ç–∏–∫–∞","–ø—É—Ç—ñ–Ω","–∑–µ–ª–µ–Ω—Å—å–∫–∏–π",
    "–±–æ–º–±–∞","–º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è","–≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è","—Ä–∞—à–∫–∞","–∫–∞—Ü–∞–ø–∏","–∞–≥—Ä–µ—Å—ñ—è",
    "–Ω–∞—Ü–∏—Å—Ç","—Ä–∞—Å–∏–∑–º","—Ç–µ—Ä–æ—Ä–∏–∑–º","—Å–º–µ—Ä—Ç—å","–≤–±–∏–≤—Å—Ç–≤–æ","—Å—Ç—Ä—ñ–ª—è–Ω–∏–Ω–∞"
]
URL_PATTERN = re.compile(r"(https?://|www\.|[a-zA-Z0-9-]+\.(com|net|ua|org|ru|by|kz|pl|info|biz|io|gg|me|ly|t\.me))")

MAX_WARNINGS = 2
violations = defaultdict(int)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("moderator")

# ------------------------- –õ–æ–≥—ñ–∫–∞ -------------------------

def is_admin(bot, chat_id: int, user_id: int) -> bool:
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ("administrator", "creator")
    except Exception as e:
        log.warning(f"get_chat_member error: {e}")
        return False

def moderate(update, context):
    if not update.message or not update.message.from_user or not update.message.text:
        return

    chat_id = update.message.chat_id
    user = update.message.from_user
    text = update.message.text.lower()

    # –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤ (–æ–ø—Ü—ñ–π–Ω–æ)
    if ALLOWED_CHAT_IDS and chat_id not in ALLOWED_CHAT_IDS:
        return

    has_violation = False
    if any(w in text for w in BAD_WORDS) or any(t in text for t in BANNED_TOPICS):
        has_violation = True
    if URL_PATTERN.search(text):
        has_violation = True

    if not has_violation:
        return

    # –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    except Exception as e:
        log.warning(f"delete_message error: {e}")

    key = (chat_id, user.id)
    violations[key] += 1
    count = violations[key]

    # –∞–¥–º—ñ–Ω—ñ–≤ –Ω–µ –±–∞–Ω–∏–º–æ
    if is_admin(context.bot, chat_id, user.id):
        try:
            context.bot.send_message(chat_id=chat_id,
                                     text=f"‚ö†Ô∏è –ü–æ—Ä—É—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.full_name}. "
                                          f"–ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤–∞ –±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤.")
        except Exception as e:
            log.warning(f"send_message(admin notice) error: {e}")
        return

    if count >= MAX_WARNINGS:
        try:
            context.bot.kick_chat_member(chat_id=chat_id, user_id=user.id)
            context.bot.send_message(chat_id=chat_id,
                                     text=f"‚õî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} –∑–∞–±–∞–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª.")
        except Exception as e:
            log.warning(f"kick_chat_member error: {e}")
    else:
        try:
            context.bot.send_message(chat_id=chat_id,
                                     text=f"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è {user.full_name}: –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª "
                                          f"({count}/{MAX_WARNINGS})")
        except Exception as e:
            log.warning(f"send_message(warn) error: {e}")

# ------------------------- Health-check (Flask) -------------------------

app = Flask(__name__)

@app.get("/")
def ok():
    return "OK", 200

def run_health_server():
    port = int(os.getenv("PORT", "10000"))
    log.info(f"üåê Health server on port {port}")
    # debug=False (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º), —â–æ–± –Ω–µ –ø–ª–æ–¥–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Ç–æ–∫–∏
    app.run(host="0.0.0.0", port=port)

# ------------------------- –ó–∞–ø—É—Å–∫ -------------------------

if __name__ == "__main__":
    # 1) –∑–∞–ø—É—Å–∫–∞—î–º–æ Flask —É —Ñ–æ–Ω—ñ
    threading.Thread(target=run_health_server, daemon=True).start()

    # 2) –±–æ—Ç —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ (—â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ idle)
    updater = Updater(BOT_TOKEN, use_context=True)

    # —á–∏—Å—Ç–∏–º–æ –º–æ–∂–ª–∏–≤–∏–π webhook —Ç–∞ –ø—ñ–¥–≤—ñ—à–µ–Ω—ñ –∞–ø–¥–µ–π—Ç–∏, —â–æ–± –Ω–µ –±—É–ª–æ Conflict
    try:
        updater.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning(f"delete_webhook error: {e}")

    dp = updater.dispatcher
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, moderate))

    log.info("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (polling)‚Ä¶")
    # —Å—Ç–∞—Ä—Ç –±–µ–∑ deprecated –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    updater.start_polling(drop_pending_updates=True)
    updater.idle()
