# -*- coding: utf-8 -*-
import os
import re
import logging
from collections import defaultdict
from flask import Flask, request, jsonify

from telegram import Bot, Update
from telegram.ext import Dispatcher, MessageHandler, Filters, CommandHandler
from telegram.error import TelegramError

# ================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==================
BOT_TOKEN = os.getenv("BOT_TOKEN") or "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù_–¢–£–¢"
if BOT_TOKEN == "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù_–¢–£–¢":
    raise RuntimeError("–ó–∞–¥–∞–π –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN.")

# Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î RENDER_EXTERNAL_URL; –º–æ–∂–Ω–∞ —è–≤–Ω–æ –∑–∞–¥–∞—Ç–∏ APP_URL
APP_URL = os.getenv("APP_URL") or os.getenv("RENDER_EXTERNAL_URL")
if not APP_URL:
    raise RuntimeError("–ù–µ–º–∞ APP_URL/RENDER_EXTERNAL_URL. –î–æ–¥–∞–π APP_URL —É Render ‚Üí Environment.")

MAX_WARNINGS = 2

BAD_WORDS = [
    "—Ö—É–π","–ø–∏–∑–¥–∞","—î–±–∞—Ç—å","—î–±—É—á","–Ω–∞—Ö—É–π","–≥–∞–Ω–¥–æ–Ω","–∑–∞–ª—É–ø–∞","–±–ª—è–¥—å","—Å—É–∫–∞","—à–∞–ª–∞–≤–∞","—á–º–æ","–º—Ä–∞–∑—å","–≥–Ω–∏–¥–∞",
    "fuck","shit","bitch","asshole","dick","pussy"
]
BANNED_TOPICS = [
    "–ø–æ–ª—ñ—Ç–∏–∫–∞","–ø—É—Ç—ñ–Ω","–∑–µ–ª–µ–Ω—Å—å–∫–∏–π","–≤—ñ–π–Ω–∞","–º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è","—Ç–µ—Ä–æ—Ä–∏–∑–º","–Ω–∞—Å–∏–ª—å—Å—Ç–≤–æ"
]

# URL —É —Ç–µ–∫—Å—Ç—ñ (–Ω–∞–≤—ñ—Ç—å –±–µ–∑ http)
URL_RE = re.compile(r"(https?://|www\.)", re.IGNORECASE)

# –ü–∞–º‚Äô—è—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å (in-memory)
warnings = defaultdict(int)

# ================== –õ–û–ì–£–í–ê–ù–ù–Ø ==================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("moderator")

# ================== TELEGRAM ==================
bot = Bot(BOT_TOKEN)
dispatcher = Dispatcher(bot=bot, update_queue=None, workers=4, use_context=True)

# ---- /ping –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ----
def ping(update, context):
    try:
        context.bot.send_message(update.effective_chat.id, "üèì Pong!")
    except TelegramError as e:
        log.warning(f"/ping send error: {e}")

# ---- –º–æ–¥–µ—Ä–∞—Ü—ñ—è ----
def handle_violation(update, context, reason: str):
    chat_id = update.effective_chat.id
    user = update.message.from_user
    uid = user.id

    # 1) –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        update.message.delete()
    except TelegramError as e:
        log.warning(f"delete error: {e}")

    # 2) –†–∞—Ö—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    warnings[uid] += 1
    count = warnings[uid]

    # 3) –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–±–æ –±–∞–Ω
    if count < MAX_WARNINGS:
        try:
            context.bot.send_message(chat_id, f"‚ö† –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è {user.first_name or ''}! ({reason}). –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É ‚Äî –±–∞–Ω.")
        except TelegramError as e:
            log.warning(f"warn send error: {e}")
    else:
        try:
            context.bot.ban_chat_member(chat_id, uid)
            context.bot.send_message(chat_id, f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name or ''} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ ({reason}).")
        except TelegramError as e:
            log.warning(f"ban error: {e}")

def text_filter(update, context):
    msg = update.message
    if not msg or not msg.text:
        return

    text = msg.text.lower()
    log.info(f"üì© {msg.from_user.id} @ {msg.chat_id}: {text}")

    # –Ω–µ—Ü–µ–Ω–∑—É—Ä–∞
    if any(w in text for w in BAD_WORDS):
        handle_violation(update, context, "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–µ–∫—Å–∏–∫–∞")
        return

    # –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Ç–µ–º–∏
    if any(t in text for t in BANNED_TOPICS):
        handle_violation(update, context, "–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ —Ç–µ–º–∞")
        return

    # URL —É —Å–∞–º–æ–º—É —Ç–µ–∫—Å—Ç—ñ
    if URL_RE.search(text):
        handle_violation(update, context, "–ø–æ—Å–∏–ª–∞–Ω–Ω—è")
        return

    # URL —è–∫ entities (Telegram —Å–∞–º —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤)
    if msg.entities:
        for ent in msg.entities:
            if ent.type in ("url", "text_link"):
                handle_violation(update, context, "–ø–æ—Å–∏–ª–∞–Ω–Ω—è")
                return

# –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
dispatcher.add_handler(CommandHandler("ping", ping))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, text_filter))

# ================== FLASK (webhook) ==================
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

@app.post(f"/{BOT_TOKEN}")
def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, bot)
        dispatcher.process_update(update)
    except Exception as e:
        log.exception(f"update handling error: {e}")
        return jsonify({"ok": False}), 500
    return jsonify({"ok": True})

def set_webhook():
    # –∑–Ω—ñ–º–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π webhook + —á–∏—Å—Ç–∏–º–æ —á–µ—Ä–≥—É –∞–ø–¥–µ–π—Ç—ñ–≤
    try:
        bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning(f"delete_webhook warn: {e}")

    url = f"{APP_URL.rstrip('/')}/{BOT_TOKEN}"
    ok = bot.set_webhook(url=url, drop_pending_updates=True, max_connections=40)
    if ok:
        log.info(f"‚úÖ Webhook set: {url}")
    else:
        raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook")

# ================== –í–•–Ü–î–ù–ê –¢–û–ß–ö–ê ==================
if __name__ == "__main__":
    set_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info(f"üåê Flask listening on {port}")
    app.run(host="0.0.0.0", port=port)
