# -*- coding: utf-8 -*-
import os
import re
import logging
from collections import defaultdict
from flask import Flask, request, jsonify

from telegram import Bot, Update, ChatPermissions
from telegram.ext import Dispatcher, MessageHandler, Filters, CommandHandler
from telegram.error import TelegramError

# ================== –ö–û–ù–§–ò–ì (–≤—à–∏—Ç–æ –ø—ñ–¥ —Ç–≤—ñ–π —Å–µ—Ä–≤—ñ—Å) ==================
BOT_TOKEN = "8313713885:AAGvmRipYoCdu2BiVdli2WRNgUxtRDN_OWU"
APP_URL   = "https://elpatron-moderator.onrender.com"  # —Ç–≤—ñ–π –¥–æ–º–µ–Ω Render
KEEPALIVE_KEY = "v3ryL0ngRand0mKey"                    # –∫–ª—é—á –¥–ª—è –ø—ñ–Ω–≥—É

# –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Üí –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π –º—å—é—Ç
MAX_WARNINGS = 2

# –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–µ–∫—Å–∏–∫–∞ / —Å—Ç–æ–ø-—Ç–µ–º–∏ (–º–æ–∂–µ—à –¥–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏)
BAD_WORDS = [
    "—Ö—É–π","–ø–∏–∑–¥–∞","–µ–±–∞—Ç—å","—ë–±–∞—Ç—å","–µ–±—É—á","—ë–±—É—á","–Ω–∞—Ö—É–π","–≥–æ–Ω–¥–æ–Ω","–∑–∞–ª—É–ø–∞","–±–ª—è–¥—å","—Å—É–∫–∞",
    "—à–∞–ª–∞–≤–∞","—á–º–æ","–º—Ä–∞–∑—å","–≥–Ω–∏–¥–∞",
    "fuck","shit","bitch","asshole","dick","pussy","nigger","retard"
]
BANNED_TOPICS = [
    "–ø–æ–ª–∏—Ç–∏–∫–∞","–ø—É—Ç–∏–Ω","–∑–µ–ª–µ–Ω—Å–∫–∏–π","–≤–æ–π–Ω–∞","–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è","—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º","–Ω–∞—Å–∏–ª–∏–µ"
]

# –õ—ñ–Ω–∫–∏ (–Ω–∞–≤—ñ—Ç—å –±–µ–∑ http)
URL_RE = re.compile(r"(https?://|www\.)", re.IGNORECASE)

# –ü–∞–º‚Äô—è—Ç—å: –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Ç–∞ –º‚Äô—é—Ç–∏ –Ω–∞ —Ä—ñ–≤–Ω—ñ —á–∞—Ç—É
warnings = defaultdict(int)        # –∫–ª—é—á: (chat_id, user_id) -> –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
muted_users = defaultdict(set)     # –∫–ª—é—á: chat_id -> set(user_id)

# ================== –õ–û–ì–ò ==================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("moderator")

# ================== TELEGRAM ==================
bot = Bot(BOT_TOKEN)
dispatcher = Dispatcher(bot=bot, update_queue=None, workers=4, use_context=True)

# ---- –∫–æ—Ä–∏—Å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ ----
def is_privileged(chat_id: int, user_id: int) -> bool:
    """–ù–µ —á—ñ–ø–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–∫–∞/–∞–¥–º—ñ–Ω—ñ–≤/—Å–∞–º–æ–≥–æ –±–æ—Ç–∞."""
    try:
        if user_id == bot.id:
            return True
        m = bot.get_chat_member(chat_id, user_id)
        return m.status in ("creator", "administrator")
    except TelegramError as e:
        log.warning(f"is_privileged error: {e}")
        return False

def require_admin(func):
    """–ö–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤/–≤–ª–∞—Å–Ω–∏–∫–∞."""
    def wrapper(update, context):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        if not is_privileged(chat_id, user_id):
            return
        return func(update, context)
    return wrapper

def mute_forever(chat_id: int, user_id: int):
    """–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π –º—å—é—Ç (–±–µ–∑ —Å—Ç—Ä–æ–∫—É)."""
    perms = ChatPermissions(
        can_send_messages=False,
        can_send_media_messages=False,
        can_send_polls=False,
        can_send_other_messages=False,
        can_add_web_page_previews=False,
        can_change_info=False,
        can_invite_users=False,
        can_pin_messages=False,
    )
    bot.restrict_chat_member(chat_id, user_id, permissions=perms)
    muted_users[chat_id].add(user_id)

def unmute(chat_id: int, user_id: int):
    """–ó–Ω—è—Ç–∏ –º—å—é—Ç (–ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–∏—Å–∞—Ç–∏)."""
    perms = ChatPermissions(
        can_send_messages=True,
        can_send_media_messages=True,
        can_send_polls=True,
        can_send_other_messages=True,
        can_add_web_page_previews=True,
        can_invite_users=True,
    )
    bot.restrict_chat_member(chat_id, user_id, permissions=perms)
    if user_id in muted_users[chat_id]:
        muted_users[chat_id].remove(user_id)

# ---- –∫–æ–º–∞–Ω–¥–∏ ----
def cmd_ping(update, context):
    try:
        context.bot.send_message(update.effective_chat.id, "üèì –ü–æ–Ω–≥!")
    except TelegramError as e:
        log.warning(f"/ping send error: {e}")

@require_admin
def cmd_banlist(update, context):
    chat_id = update.effective_chat.id
    lst = muted_users[chat_id]
    if not lst:
        context.bot.send_message(chat_id, "üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    ids = "\n".join(str(uid) for uid in lst)
    context.bot.send_message(chat_id, f"üìÑ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (–º—å—é—Ç):\n{ids}")

@require_admin
def cmd_unban(update, context):
    chat_id = update.effective_chat.id
    target_id = None

    # /unban —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id

    # –∞–±–æ /unban <user_id>
    if not target_id and context.args:
        arg = context.args[0]
        if arg.isdigit():
            target_id = int(arg)

    if not target_id:
        context.bot.send_message(chat_id, "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /unban <user_id>.")
        return

    if is_privileged(chat_id, target_id):
        context.bot.send_message(chat_id, "‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º ‚Äî —É –Ω–∏—Ö —Å–≤–æ–∏ –ø—Ä–∞–≤–∞.")
        return

    try:
        unmute(chat_id, target_id)
        context.bot.send_message(chat_id, f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
    except TelegramError as e:
        log.warning(f"unban error: {e}")
        context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.")

# ---- –º–æ–¥–µ—Ä–∞—Ü—ñ—è ----
def handle_violation(update, context, reason: str):
    chat_id = update.effective_chat.id
    user = update.message.from_user
    uid = user.id

    # –Ü–º—É–Ω—ñ—Ç–µ—Ç –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤/–≤–ª–∞—Å–Ω–∏–∫–∞/–±–æ—Ç–∞
    if is_privileged(chat_id, uid):
        return

    # 1) –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        update.message.delete()
    except TelegramError as e:
        log.warning(f"delete error: {e}")

    # 2) –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    warnings[(chat_id, uid)] += 1
    count = warnings[(chat_id, uid)]

    # 3) –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–º–∞–º—å—é—Ç
    if count < MAX_WARNINGS:
        try:
            context.bot.send_message(
                chat_id,
                f"‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user.first_name or ''}! ({reason}). –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞."
            )
        except TelegramError as e:
            log.warning(f"warn send error: {e}")
    else:
        try:
            mute_forever(chat_id, uid)
            context.bot.send_message(
                chat_id,
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name or ''} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ."
            )
        except TelegramError as e:
            log.warning(f"mute error: {e}")
            context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.")

def text_filter(update, context):
    msg = update.message
    if not msg or not msg.text:
        return

    text = msg.text.lower()
    chat_id = msg.chat_id
    user_id = msg.from_user.id

    log.info(f"üì© {user_id} @ {chat_id}: {text}")

    # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ–≤/–≤–ª–∞—Å–Ω–∏–∫–∞/–±–æ—Ç–∞
    if is_privileged(chat_id, user_id):
        return

    # –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∞
    if any(w in text for w in BAD_WORDS):
        handle_violation(update, context, "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞")
        return

    # –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Ç–µ–º–∏
    if any(t in text for t in BANNED_TOPICS):
        handle_violation(update, context, "–∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞")
        return

    # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–µ–∫—Å—Ç—ñ
    if URL_RE.search(text):
        handle_violation(update, context, "—Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã")
        return

    # –ø–æ—Å–∏–ª–∞–Ω–Ω—è-entities
    if msg.entities:
        for ent in msg.entities:
            if ent.type in ("url", "text_link"):
                handle_violation(update, context, "—Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã")
                return

# —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
dispatcher.add_handler(CommandHandler("ping",    cmd_ping))
dispatcher.add_handler(CommandHandler("banlist", cmd_banlist))
dispatcher.add_handler(CommandHandler("unban",   cmd_unban, pass_args=True))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, text_filter))

# ================== FLASK (webhook) ==================
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

# keepalive (–æ–ø—Ü—ñ–π–Ω–æ, —è–∫—â–æ —Ö–æ—á–µ—à –ø—ñ–Ω–≥—É–≤–∞—Ç–∏, —â–æ–± –Ω–µ –∑–∞—Å–∏–Ω–∞–≤)
@app.get(f"/keepalive/{KEEPALIVE_KEY}")
def keepalive():
    return "ok", 200

@app.post(f"/{BOT_TOKEN}")
def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, bot)
        dispatcher.process_update(update)
    except Exception as e:
        log.exception(f"update handling error: {e}")
        return jsonify({"ok": False}), 500
    return jsonify({"ok": True})

def set_webhook():
    # –∑–Ω—è—Ç–∏ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫ —ñ –ø–æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É
    try:
        bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning(f"delete_webhook warn: {e}")

    url = f"{APP_URL.rstrip('/')}/{BOT_TOKEN}"
    ok = bot.set_webhook(url=url, drop_pending_updates=True, max_connections=40)
    if ok:
        log.info(f"‚úÖ Webhook set: {url}")
    else:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

# ================== START ==================
if __name__ == "__main__":
    set_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info(f"üåê Flask listening on {port}")
    app.run(host="0.0.0.0", port=port)
